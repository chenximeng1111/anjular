git指令
  1）git仓库的状态与区域
    3个区域：
      工作区：工作的区域，我们用于写作代码的空间
      暂存区：
      当前HEAD指向的分支:
    4个状态
      1、unmodified:工作区以及暂存区中没有任何需要提交的的修改，工作区很干净
      2、untracked:仓库中有新建的文件，但是还没有提交过，没有被纳入到git的控制中
      3、modified：有文件被修改，但是还没有提交到暂存区
      4、staged:工作区的修改已经被提交到了暂存区，即：已经执行过 git add命令，正在等待被提交到master上
  2）撤销修改
     1、撤销工作区的修改
       git checkout--文件名
       文件修改以后没有被执行git add指令
     2、撤销暂存区的修改
      文件已经被修改，并且已经执行过git add，但是还没有git commit
      分两步：
         撤销暂存操作：
            git reset HEAD 文件名
         撤销工作区的修改：
            git checkout--文件名

     3、撤销master的修改
        无缝撤销,可以通过版本回退的方式
        撤销前，先查看提交的id，确认需要回退到那个
           git reset --hard 提交的id
  3）查看提交信息/存盘点
    git log 
       如果查询的提交过多，无法一次性全部显示，可以按shift+q提前结束
    git log --pretty=oneline
  4)关于存盘点(HEAD)
     实现版本的控制
     git中把每一次的提交都会串成一条时间线，这个时间线就是一条分支，默认只有一条分支master，也称之为主分支
     而HEAD指向当前的分支.
  5）分支
     1、创建分支
        git branch 分支名
         将当前所在的分支复制一条新的分支出来
      2、查看当前所有的分支
      git branch
      其中前面有*号的表示当前所在的分支
    3、切换分支
      git checkout 分支名称
      在分支上的操作不会影响其他分支上的数据
    4、合并分支
        git merge 分支名称
        将指定名称的分支的内容合并到当前分支
        eg：
          在master分支下使用 git merge v1
          将v1的分支的内容合并到master中去
          master分支的内容改变,v1的内容不会改变
          git branch -d 分支名称
          git branch -D 分支名称
    5、删除分支
      git branch -d 分支结构
         删除指定分支(不能删除当前所在的分支)
      git branch -D 分支结构
         强制删除未合并的分支
  2、github的使用
          github.com
      http://github.com
      远程仓库
      1）注册登录
      2）新建远程仓库
          单击右上角+------>new respository---在repository name框里输入远程仓库的名字
          --->点击creat respository
      3)将本地仓库与远程仓库相关联
      git remote add origin 远程仓库的地址.git
        add：表示添加关联
       origin:表示一个变量名，方便后续操作的使用，指代后面的  远程仓库地址.git  这个地址 
      4）将本地仓库的内容推送给远程仓库
      git push -u origin master
          -u:只在第一次推送的时候添加，以后推送就不需要再添加了
            告诉远程仓库创建一个master分支
            origin:关联本地与远程仓库时取得一个别名，指代远程仓库的地址,关联时可以取其他的别名，不一定是origin
      5）删除远程仓库
         setting---->Danger Zoon
      6）删除本地仓库与远程仓库之间的关联
        git remove remove origin

        git remove:查看是否关联成功

    秘钥
      公钥-私钥
       